1
00:00:04,300 --> 00:00:04,600
计算机


2
00:00:06,030 --> 00:00:08,610
习惯以什么样的方式来做计算的


3
00:00:09,030 --> 00:00:11,850
比如说我们今天想要算算这么一个方程


4
00:00:11,850 --> 00:00:13,350
r x加六等于二十


5
00:00:14,390 --> 00:00:14,930
我们怎么算


6
00:00:15,680 --> 00:00:15,860
二


7
00:00:16,520 --> 00:00:16,670
x


8
00:00:17,940 --> 00:00:18,210
加


9
00:00:18,970 --> 00:00:19,000
六


10
00:00:19,860 --> 00:00:21,030
等于二十


11
00:00:23,300 --> 00:00:25,250
我们学过方强啊


12
00:00:25,250 --> 00:00:26,750
我们知道这是很容易啊


13
00:00:26,750 --> 00:00:27,020
那就是


14
00:00:27,750 --> 00:00:31,170
rs等于二十减六


15
00:00:31,880 --> 00:00:36,530
那就是x等于十四除以二


16
00:00:36,530 --> 00:00:37,190
那就等于去了


17
00:00:39,980 --> 00:00:40,370
是啊


18
00:00:40,370 --> 00:00:43,100
这是对于人来说很容易算


19
00:00:43,100 --> 00:00:43,850
但是呢


20
00:00:43,850 --> 00:00:44,690
对于计算机来说


21
00:00:45,680 --> 00:00:48,110
你要让他去学会怎么样列这样的方程式


22
00:00:49,140 --> 00:00:49,470
不容易


23
00:00:50,830 --> 00:00:51,700
所以计算机怎么算


24
00:00:52,460 --> 00:00:54,140
计算机会有另外的算法


25
00:00:54,140 --> 00:00:55,700
另外的办法来做这样的事情


26
00:00:56,410 --> 00:00:56,680
比如说


27
00:00:58,160 --> 00:00:58,490
假设呢


28
00:00:59,340 --> 00:00:59,430
呃


29
00:01:00,330 --> 00:01:01,860
你现在什么都不会


30
00:01:01,860 --> 00:01:02,550
没有学过方程


31
00:01:02,550 --> 00:01:03,900
是你看到这样的式子


32
00:01:03,900 --> 00:01:04,500
你会怎么去想


33
00:01:07,260 --> 00:01:08,760
有一个想法是这样


34
00:01:08,760 --> 00:01:09,180
我们能不能


35
00:01:10,080 --> 00:01:10,560
凑这个数


36
00:01:11,180 --> 00:01:12,140
我先试试看


37
00:01:12,140 --> 00:01:13,070
如果是一


38
00:01:13,720 --> 00:01:14,710
那么二乘以一


39
00:01:16,880 --> 00:01:16,910
哎


40
00:01:17,830 --> 00:01:21,370
乘以一等于二加六等于八


41
00:01:22,310 --> 00:01:22,700
好吧


42
00:01:22,700 --> 00:01:23,900
他不得二十


43
00:01:25,800 --> 00:01:26,220
嗯


44
00:01:26,220 --> 00:01:26,760
不行


45
00:01:26,760 --> 00:01:27,780
那我们再来


46
00:01:27,780 --> 00:01:29,130
如果这个不是一


47
00:01:29,130 --> 00:01:30,030
这个是二


48
00:01:30,030 --> 00:01:32,520
那么这里就有四加六就有十四


49
00:01:34,290 --> 00:01:34,440
啊


50
00:01:34,440 --> 00:01:34,800
好吧


51
00:01:34,800 --> 00:01:35,070
就十


52
00:01:35,950 --> 00:01:36,790
然后呢还不够


53
00:01:38,290 --> 00:01:40,120
于是再试一下三够不够


54
00:01:40,810 --> 00:01:42,400
最后我们一直往上凑


55
00:01:42,400 --> 00:01:42,880
凑到说


56
00:01:42,880 --> 00:01:43,540
哎


57
00:01:43,540 --> 00:01:44,470
正好是七的时候


58
00:01:45,190 --> 00:01:46,180
这个是不是可以的


59
00:01:47,020 --> 00:01:49,180
所以咱们计算机在算东西的时候啊


60
00:01:49,180 --> 00:01:50,200
其实他也经常是


61
00:01:50,690 --> 00:01:50,870
啊


62
00:01:50,870 --> 00:01:52,280
这么这么傻傻的来算东西


63
00:01:52,910 --> 00:01:54,170
因为对这些来说呢


64
00:01:54,660 --> 00:01:55,020
去


65
00:01:55,580 --> 00:01:56,420
凑一个数出来


66
00:01:57,250 --> 00:01:58,960
比找一个方法来算


67
00:01:58,960 --> 00:01:59,770
东西会更容易


68
00:02:00,410 --> 00:02:00,590
啊


69
00:02:00,590 --> 00:02:02,810
所以计算机机场真的就是怎么干呢


70
00:02:02,810 --> 00:02:02,840
我


71
00:02:03,820 --> 00:02:04,870
一个一个的


72
00:02:04,870 --> 00:02:06,970
把所有的可能都去列出来


73
00:02:06,970 --> 00:02:08,680
然后一个个的去试


74
00:02:08,680 --> 00:02:09,310
哪一个是对的


75
00:02:09,950 --> 00:02:11,120
一直到找到是对的为止


76
00:02:11,760 --> 00:02:13,020
这种方法呢


77
00:02:13,020 --> 00:02:14,100
我们把它叫做枚举


78
00:02:15,070 --> 00:02:17,170
一枚一枚的举出来啊


79
00:02:17,170 --> 00:02:17,800
这就是枚举


80
00:02:18,760 --> 00:02:19,210
那


81
00:02:19,990 --> 00:02:20,680
除了这个方法


82
00:02:20,680 --> 00:02:26,590
但枚举我们会看到说有一个很可能会有很大的缺点就是你得一个个是啊啊


83
00:02:26,590 --> 00:02:28,180
咱们现在这个是欺


84
00:02:28,180 --> 00:02:29,500
从一数到七


85
00:02:29,500 --> 00:02:29,860
呃


86
00:02:29,860 --> 00:02:31,180
早七个就可以了


87
00:02:31,180 --> 00:02:32,380
如果这是七万呢


88
00:02:32,380 --> 00:02:35,140
也得从一所到七万就比较慢对不对


89
00:02:35,140 --> 00:02:37,870
所以为了让计算机能算的快


90
00:02:37,870 --> 00:02:39,340
我们就会有各种各样的


91
00:02:39,820 --> 00:02:40,030
算法


92
00:02:40,870 --> 00:02:42,520
比方说我们举个例子


93
00:02:42,520 --> 00:02:43,870
对于这个方程来说


94
00:02:43,870 --> 00:02:44,710
我们有一个比较


95
00:02:45,680 --> 00:02:47,060
简单的方案


96
00:02:47,060 --> 00:02:48,230
我不要再算方程


97
00:02:48,230 --> 00:02:50,750
我也不要他一个个去枚举出来


98
00:02:50,750 --> 00:02:51,890
我们可以有一个别的方法


99
00:02:52,500 --> 00:02:53,250
这个方法呢


100
00:02:53,250 --> 00:03:00,270
我们可以试看是不是这样假如说我们已经知道这个x的范围大概是从一到


101
00:03:01,580 --> 00:03:02,030
十之间


102
00:03:02,740 --> 00:03:02,950
啊


103
00:03:02,950 --> 00:03:03,550
比如说我


104
00:03:03,550 --> 00:03:05,590
我们已经有这么一个条件是知道的啊


105
00:03:06,500 --> 00:03:06,650
哎


106
00:03:06,650 --> 00:03:08,090
所以我们解决问题经常是这样


107
00:03:08,090 --> 00:03:09,710
如果你知道的条件越多


108
00:03:09,710 --> 00:03:12,230
那么你解决问题的手段肯定就会越好


109
00:03:12,230 --> 00:03:14,270
假如我们知道他是一到十之间


110
00:03:15,110 --> 00:03:16,100
那我们就可以先试试看


111
00:03:16,100 --> 00:03:17,540
如果我们先上个


112
00:03:17,540 --> 00:03:18,410
我们不是一直来


113
00:03:18,410 --> 00:03:19,790
就是以我先上个五


114
00:03:19,790 --> 00:03:20,180
所以呢


115
00:03:20,180 --> 00:03:21,050
我们情况就会变成说


116
00:03:22,010 --> 00:03:22,400
今天呢


117
00:03:23,020 --> 00:03:25,330
我们不是一上来就来一我们先上个五


118
00:03:26,410 --> 00:03:28,030
二千五是十所以


119
00:03:28,030 --> 00:03:28,660
呢这笔


120
00:03:28,660 --> 00:03:29,500
加回来呢就是


121
00:03:29,500 --> 00:03:31,320
十六我


122
00:03:31,320 --> 00:03:36,370
随着小鱼


123
00:03:36,370 --> 00:03:37,330
二是说明什么


124
00:03:37,330 --> 00:03:40,900
说明我们要寻求的那个答案应该比武要来的大


125
00:03:42,000 --> 00:03:45,060
在五和那个石中间


126
00:03:45,060 --> 00:03:47,130
所以我们就接下来去是什么呢


127
00:03:47,130 --> 00:03:48,180
我核实中间那个数


128
00:03:48,870 --> 00:03:50,790
于是我们发现说我们可以是七


129
00:03:50,790 --> 00:03:51,300
或者是八


130
00:03:52,290 --> 00:03:54,390
假如我们一下子正好我们就是了


131
00:03:54,390 --> 00:03:55,620
七你说我们就发现说


132
00:03:55,620 --> 00:03:58,230
而乘以七这边刚好就是二十


133
00:03:58,230 --> 00:03:59,070
于是呢


134
00:03:59,070 --> 00:03:59,790
我们就得到答案了


135
00:04:01,480 --> 00:04:01,720
两步


136
00:04:02,730 --> 00:04:03,690
我们就可以得到他


137
00:04:04,750 --> 00:04:04,930
啊


138
00:04:04,930 --> 00:04:07,690
这种方案这种方法我们叫做二分法


139
00:04:07,690 --> 00:04:10,660
以后我们会看到很多在用计算机解决问题的过程当中


140
00:04:11,770 --> 00:04:12,370
人们


141
00:04:12,370 --> 00:04:13,600
毕竟这已经是一个


142
00:04:15,370 --> 00:04:17,230
六七十年的东西了


143
00:04:17,230 --> 00:04:18,940
人民进想出了很多很多的方法


144
00:04:18,940 --> 00:04:20,560
对于各种的问题


145
00:04:20,560 --> 00:04:23,140
我们有各种更好的办法去计算


146
00:04:23,140 --> 00:04:23,860
他去解决他


147
00:04:25,200 --> 00:04:27,360
一旦我们有了一个程序


148
00:04:28,050 --> 00:04:29,640
这个程序写出来之后


149
00:04:30,630 --> 00:04:33,120
计算器怎么能够去执行你的这个程序呢


150
00:04:33,120 --> 00:04:39,240
我们前面已经看到你的程序写出来是用一种类似于英文啊


151
00:04:39,240 --> 00:04:41,130
里面都是字母数字这样的东西


152
00:04:41,130 --> 00:04:41,520
但是呢


153
00:04:41,520 --> 00:04:43,140
计算机实际懂的语言呢


154
00:04:43,140 --> 00:04:47,040
是那种十六进制都是数字的那种那那种方式他才懂


155
00:04:47,040 --> 00:04:50,160
那么在这两个之间是有有差异的对吧


156
00:04:50,160 --> 00:04:50,280
那么


157
00:04:50,690 --> 00:04:53,900
计算机去呃执行你写的那个程序


158
00:04:53,900 --> 00:04:55,220
他就有两种方案


159
00:04:55,220 --> 00:04:56,150
一种方案呢


160
00:04:56,150 --> 00:04:56,780
我们叫做解释


161
00:04:57,800 --> 00:04:58,370
就是说


162
00:04:58,370 --> 00:05:00,830
我需要有一个计算机上的程序


163
00:05:00,830 --> 00:05:04,070
这个程序呢他能够读懂你写的那个程序


164
00:05:05,210 --> 00:05:06,350
这有点绕口是吧


165
00:05:06,350 --> 00:05:08,690
有一个程序读懂你写的程序啊


166
00:05:08,690 --> 00:05:10,310
他把你写的程序独进去


167
00:05:10,310 --> 00:05:11,300
不进去以后呢


168
00:05:11,300 --> 00:05:13,280
他看你地方要他做什么啊


169
00:05:13,280 --> 00:05:14,270
去厨房ok


170
00:05:14,270 --> 00:05:15,890
他就让这段机做了一个去厨房的事


171
00:05:17,010 --> 00:05:19,230
以第一件事儿让他做什么t等于二ok


172
00:05:19,230 --> 00:05:20,910
大家这样去做t等于二的三


173
00:05:20,910 --> 00:05:23,280
所以他会看懂你的程序


174
00:05:23,280 --> 00:05:25,650
他会转身让计算机去做


175
00:05:25,650 --> 00:05:26,370
你要他做的事情


176
00:05:27,520 --> 00:05:29,350
如果是这么执行的程序呢


177
00:05:29,350 --> 00:05:30,310
这种方式叫做解释


178
00:05:31,430 --> 00:05:32,420
那还有一种方式呢


179
00:05:32,420 --> 00:05:33,260
叫做编译


180
00:05:34,260 --> 00:05:36,480
就是先有一个程序


181
00:05:36,480 --> 00:05:38,280
所以咱们还得有一个程序是吧


182
00:05:38,280 --> 00:05:40,620
那个程序呢拿着你的程序


183
00:05:40,620 --> 00:05:42,600
他能读懂你程序完了以后呢


184
00:05:42,600 --> 00:05:44,160
他把你的程序翻译一下


185
00:05:45,170 --> 00:05:46,310
变成计算机能懂的


186
00:05:47,040 --> 00:05:47,310
程序


187
00:05:47,850 --> 00:05:48,450
于是呢


188
00:05:48,450 --> 00:05:50,220
你的程序被翻译过以后呢


189
00:05:50,220 --> 00:05:50,880
你读不懂了


190
00:05:50,880 --> 00:05:51,930
但是计算机能读懂了


191
00:05:53,030 --> 00:05:55,460
然后他把这个计算机能读懂我们程序呢


192
00:05:55,460 --> 00:05:56,120
留下来


193
00:05:56,120 --> 00:05:57,320
也就是保存下来


194
00:05:57,770 --> 00:05:58,520
那以后


195
00:05:58,520 --> 00:05:59,960
你的程序想要执行的时候


196
00:05:59,960 --> 00:06:02,360
就不是拿你写的那个程序去执行


197
00:06:02,360 --> 00:06:05,270
而是哪他翻译过以后的那个程序去执行


198
00:06:06,220 --> 00:06:07,810
那么这个过程啊


199
00:06:07,810 --> 00:06:09,070
这个翻译的过程


200
00:06:09,070 --> 00:06:10,360
我们把它叫做编译


201
00:06:11,110 --> 00:06:11,800
啊编译


202
00:06:11,800 --> 00:06:14,590
那么编译完以后就是计算机直接能够懂的东西


203
00:06:14,590 --> 00:06:18,190
所以程序的执行是有这样两种可能的方式的


204
00:06:20,050 --> 00:06:20,890
也就是说呢


205
00:06:20,890 --> 00:06:22,870
这个解释是怎么回事呢


206
00:06:22,870 --> 00:06:24,820
咱们写了一个程序是吧


207
00:06:24,820 --> 00:06:25,960
就程序呢


208
00:06:25,960 --> 00:06:28,090
写在一个文件里头啊


209
00:06:28,090 --> 00:06:29,230
存在于文件里头


210
00:06:29,230 --> 00:06:31,630
完了以后呢交给一个程序


211
00:06:33,840 --> 00:06:34,470
那程序呢


212
00:06:35,190 --> 00:06:36,510
他能读懂你的程序


213
00:06:36,510 --> 00:06:37,230
可是呢


214
00:06:37,230 --> 00:06:38,280
他不产生任何东西


215
00:06:38,280 --> 00:06:39,450
他只是去做动作


216
00:06:40,250 --> 00:06:45,050
他拿着你的程序去开始一条一条一条一条的走走完以后呢


217
00:06:45,370 --> 00:06:45,940
就做完了


218
00:06:45,940 --> 00:06:46,630
这事就做完了


219
00:06:46,630 --> 00:06:49,000
那下一回你要再运行你的程序的时候


220
00:06:49,000 --> 00:06:51,880
你还得把这个能够解释你的程序的这个东西呢


221
00:06:51,880 --> 00:06:55,330
给召唤出来由他来执行你的程序而编译呢


222
00:06:55,330 --> 00:06:56,860
是说你还是拿着这个源代码


223
00:06:56,860 --> 00:06:59,530
是不是你交给了一个翻译官


224
00:07:00,850 --> 00:07:01,030
啊


225
00:07:01,030 --> 00:07:03,790
这个翻译的人呢翻译的这个程序呢负责呢


226
00:07:03,790 --> 00:07:04,510
把你的程序呢


227
00:07:05,270 --> 00:07:07,580
变成了另外一个程序


228
00:07:07,580 --> 00:07:08,270
那里头呢


229
00:07:08,270 --> 00:07:10,790
都是各种计算机的不懂的东西啊


230
00:07:10,790 --> 00:07:11,330
人家都不懂了


231
00:07:12,840 --> 00:07:13,170
完了以后


232
00:07:14,000 --> 00:07:14,960
你的程序一点儿没执行


233
00:07:15,780 --> 00:07:16,050
啊


234
00:07:16,050 --> 00:07:16,890
该你要他做什么


235
00:07:16,890 --> 00:07:17,940
什么都不去做


236
00:07:17,940 --> 00:07:23,970
然后你得让这个程序去运行去这个程序在计算机上运行起来以后呢


237
00:07:23,970 --> 00:07:25,860
他才能够给你得到你要的那个结果


238
00:07:26,710 --> 00:07:26,890
啊


239
00:07:26,890 --> 00:07:28,330
所以上头那一个啊


240
00:07:28,330 --> 00:07:29,980
这叫做解释啊


241
00:07:29,980 --> 00:07:31,750
这个呢叫做编译


242
00:07:31,750 --> 00:07:34,240
这是程序执行的两种不同的方式


243
00:07:34,240 --> 00:07:37,120
那因为有这样两种方式去执行程序


244
00:07:37,120 --> 00:07:38,320
就会有人有一个误解说


245
00:07:39,460 --> 00:07:41,740
这个语言是解释执行的


246
00:07:41,740 --> 00:07:44,110
那个语言是编译执行的


247
00:07:44,110 --> 00:07:44,830
其实呢


248
00:07:44,830 --> 00:07:47,140
对于计算机的编程语言来说


249
00:07:47,140 --> 00:07:51,100
语言本身是没有解释和编译的区分的啊


250
00:07:51,100 --> 00:07:53,170
任何一种语言既可以解释执行


251
00:07:53,170 --> 00:07:54,670
也可以便于执行


252
00:07:54,670 --> 00:07:56,920
这只是传统和习惯的问题


253
00:07:57,540 --> 00:07:59,520
只是这种语言常用的


254
00:07:59,520 --> 00:08:01,140
他的程序的执行方式


255
00:08:01,140 --> 00:08:04,350
比如说我们经常听到说c点是编译型的语言没错


256
00:08:04,350 --> 00:08:06,210
因为一般我们写c员的ce元的


257
00:08:06,210 --> 00:08:07,350
所以写出来以后呢


258
00:08:07,350 --> 00:08:08,760
你是需要编译


259
00:08:08,760 --> 00:08:09,780
然后再来运行


260
00:08:11,060 --> 00:08:12,800
但是也有人去做了


261
00:08:12,800 --> 00:08:14,660
c元的解释器是吧


262
00:08:14,660 --> 00:08:16,280
然后一般我们都这样说拍上语言


263
00:08:16,280 --> 00:08:17,960
它是一个解释性的语言


264
00:08:17,960 --> 00:08:18,950
因为你不需要编译


265
00:08:18,950 --> 00:08:20,960
直接就可以拿源代码去执行了


266
00:08:20,960 --> 00:08:21,410
但是呢


267
00:08:21,410 --> 00:08:22,370
也有人愿意的话


268
00:08:22,370 --> 00:08:24,830
你也可以去做他的这个编译器去啊


269
00:08:24,830 --> 00:08:24,980
所以


270
00:08:25,600 --> 00:08:27,280
语言本身没有解释和


271
00:08:28,090 --> 00:08:28,480
便宜的


272
00:08:28,480 --> 00:08:30,580
这个区分只是他的具体的执行方式而已


273
00:08:31,410 --> 00:08:34,170
那这两种方式有没有好坏呢


274
00:08:34,870 --> 00:08:35,650
解释性的语言


275
00:08:35,650 --> 00:08:37,270
能够有一些特殊的计算能力


276
00:08:37,270 --> 00:08:38,980
因为源代码在


277
00:08:39,820 --> 00:08:41,140
执行的过程当中


278
00:08:41,140 --> 00:08:43,000
不断的去被解读


279
00:08:43,000 --> 00:08:46,180
那么有可以有可能让我们可以做一些特殊的事情啊


280
00:08:46,180 --> 00:08:47,680
比方说运行过程当中


281
00:08:47,680 --> 00:08:49,090
源代码是不是可以被修改啊


282
00:08:49,090 --> 00:08:49,240
等等


283
00:08:50,400 --> 00:08:50,940
呃


284
00:08:50,940 --> 00:08:51,300
过去呢


285
00:08:51,300 --> 00:08:53,970
我们一般会觉得时候解释性的语言会运行的比较慢


286
00:08:53,970 --> 00:08:54,540
因为


287
00:08:55,050 --> 00:08:56,610
你不是直接在计算机上运行的


288
00:08:56,610 --> 00:08:56,820
对吧


289
00:08:56,820 --> 00:08:59,730
你需要有一个程序帮助你去运行他


290
00:08:59,730 --> 00:09:00,060
但是呢


291
00:09:00,060 --> 00:09:00,450
现在呢


292
00:09:00,450 --> 00:09:03,150
我们发现呢这个我们看到啊


293
00:09:03,150 --> 00:09:04,200
解释性的语言


294
00:09:04,200 --> 00:09:07,650
他的运行效率和边形的语言的运行效率呢


295
00:09:07,650 --> 00:09:09,030
已经不是重要的问题


296
00:09:09,030 --> 00:09:12,270
因为计算机的速度已经到了一个比较高的层次


297
00:09:12,270 --> 00:09:12,780
上面


298
00:09:12,780 --> 00:09:14,400
那么在那个速度底下解释


299
00:09:14,400 --> 00:09:14,610
编译


300
00:09:14,910 --> 00:09:16,980
的运行的性能不是太大的


301
00:09:16,980 --> 00:09:19,530
这个呃这个这个差异啊


302
00:09:19,530 --> 00:09:21,360
那边型的语言有边形语言的好


303
00:09:21,360 --> 00:09:23,880
就比如说他能够有确定的运算性能


304
00:09:23,880 --> 00:09:25,320
这个意思是说我


305
00:09:25,630 --> 00:09:27,880
同样的程序在运行的过程当中是这么快的


306
00:09:27,880 --> 00:09:28,870
他就是这么快是吧


307
00:09:28,870 --> 00:09:30,940
他能够有一个明确的运算性能


308
00:09:30,940 --> 00:09:32,680
所以在今天来说


309
00:09:32,680 --> 00:09:37,300
这两种方式执行方式已经没有非常大的本质上的区别啊


310
00:09:37,300 --> 00:09:39,100
这只是传统和喜好的问题


